{"version":3,"file":"markdownItFrontMatter.umd.js","sources":["../index.js"],"sourcesContent":["// Process front matter and pass to cb\n\n\nmodule.exports = function front_matter_plugin(md, opts) {\n  opts = Object.assign({}, opts);\n\n  let min_markers = 3,\n      marker_str  = '-',\n      marker_char = marker_str.charCodeAt(0),\n      marker_len  = marker_str.length;\n\n  function frontMatter(state, startLine, endLine, silent) {\n    let pos,\n        nextLine,\n        marker_count,\n        token,\n        old_parent,\n        old_line_max,\n        start_content,\n        auto_closed = false,\n        start = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    // Check out the first character of the first line quickly,\n    // this should filter out non-front matter\n    if (startLine !== 0 || marker_char !== state.src.charCodeAt(0)) {\n      return false;\n    }\n\n    // Check out the rest of the marker string\n    // while pos <= 3\n    for (pos = start + 1; pos <= max; pos++) {\n      if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\n        start_content = pos + 1;\n        break;\n      }\n    }\n\n    marker_count = Math.floor((pos - start) / marker_len);\n\n    if (marker_count < min_markers) {\n      return false;\n    }\n    pos -= (pos - start) % marker_len;\n\n    // Since start is found, we can report success here in validation mode\n    if (silent) {\n      return true;\n    }\n\n    // Search for the end of the block\n    nextLine = startLine;\n\n    for (;;) {\n      nextLine++;\n      if (nextLine >= endLine) {\n        // unclosed block should be autoclosed by end of document.\n        // also block seems to be autoclosed by end of parent\n        break;\n      }\n\n      if (state.src.slice(start, max) === '...') {\n        break;\n      }\n\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (start < max && state.sCount[nextLine] < state.blkIndent) {\n        // non-empty line with negative indent should stop the list:\n        // - ```\n        //  test\n        break;\n      }\n\n      if (marker_char !== state.src.charCodeAt(start)) {\n        continue;\n      }\n\n      if (state.sCount[nextLine] - state.blkIndent >= 4) {\n        // closing fence should be indented less than 4 spaces\n        continue;\n      }\n\n      for (pos = start + 1; pos <= max; pos++) {\n        if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\n          break;\n        }\n      }\n\n      // closing code fence must be at least as long as the opening one\n      if (Math.floor((pos - start) / marker_len) < marker_count) {\n        continue;\n      }\n\n      // make sure tail has spaces only\n      pos -= (pos - start) % marker_len;\n      pos = state.skipSpaces(pos);\n\n      if (pos < max) {\n        continue;\n      }\n\n      // found!\n      auto_closed = true;\n      break;\n    }\n\n    old_parent = state.parentType;\n    old_line_max = state.lineMax;\n    state.parentType = 'container';\n\n    // this will prevent lazy continuations from ever going past our end marker\n    state.lineMax = nextLine;\n\n    token        = state.push('front_matter', null, 0);\n    token.hidden = true;\n    token.markup = state.src.slice(startLine, pos);\n    token.block  = true;\n    token.map    = [ startLine, pos ];\n    token.meta   = state.src.slice(start_content, start - 1);\n\n    state.parentType = old_parent;\n    state.lineMax = old_line_max;\n    state.line = nextLine + (auto_closed ? 1 : 0);\n\n    if (opts.callback) {\n      opts.callback.call(opts, token.meta, token, state);\n    }\n\n    return true;\n  }\n\n  md.block.ruler.before(\n    'table',\n    'front_matter',\n    frontMatter,\n    {\n      alt: [\n        'paragraph',\n        'reference',\n        'blockquote',\n        'list'\n      ]\n    }\n  );\n};\n"],"names":["module","exports","front_matter_plugin","md","opts","Object","assign","min_markers","marker_str","marker_char","charCodeAt","marker_len","length","frontMatter","state","startLine","endLine","silent","pos","nextLine","marker_count","token","old_parent","old_line_max","start_content","auto_closed","start","bMarks","tShift","max","eMarks","src","Math","floor","slice","sCount","blkIndent","skipSpaces","parentType","lineMax","push","hidden","markup","block","map","meta","line","callback","call","ruler","before","alt"],"mappings":"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"}